                  .text 
                  .globl main


reverse:
        addiu   $sp,$sp,-24         #set $t1 to $t2 with unsigned immediate(-24)
        sw      $fp,20($sp)        
        move    $fp,$sp          
        sw      $4,24($fp)
        sw      $0,8($fp)
        sw      $0,12($fp)
        b       $L2             #Branch to statement
        nop                     #it is a null operation (and in machin code is zero)

$L3:
        lw      $3,24($fp)        
        li      $2,10                  # 0xa
        div     $0,$3,$2           #division: set $0 to ($3 divided by $2, integer division
        bne     $2,$0,1f
        nop
        break   7
        mfhi    $2
        sw      $2,12($fp)
        lw      $3,8($fp)
        nop
        move    $2,$3
        sll     $2,$2,2
        addu    $2,$2,$3    #addtrion unsigned: set $2 to (set $2 plus $3), no overflow
        sll     $2,$2,1 
        move    $3,$2
        lw      $2,12($fp)
        nop
        addu    $2,$2,$3
        sw      $2,8($fp)
        lw      $3,24($fp)
        li      $2,10                 # 0xa
        div     $0,$3,$2
        bne     $2,$0,1f
        nop
        break   7
        mfhi    $2
        mflo    $2
        sw      $2,24($fp)
$L2:
        lw      $2,24($fp)
        nop
        bgtz    $2,$L3    #branch if greater than zero
        nop

        lw      $2,8($fp)
        move    $sp,$fp
        lw      $fp,20($sp)
        addiu   $sp,$sp,24 
        jr      $31                    #jump to statement whose address is in $31
        nop

isPalindrome:
        addiu   $sp,$sp,-40
        sw      $31,36($sp) # store word: store cotents of the register into effective memory
        sw      $fp,32($sp)
        move    $fp,$sp
        sw      $4,40($fp)
        sw      $0,24($fp)
        lw      $4,40($fp)
        jal     reverse       #jump and link: set $ra to program counter then jump to statement at target address 
        nop

        move    $3,$2
        lw      $2,40($fp)
        nop
        bne     $2,$3,$L6
        nop

        li      $2,1                        # 0x1
        sw      $2,24($fp)
        lw      $2,24($fp)
        b       $L7
        nop

$L6:
        lw      $2,24($fp)
$L7:
        move    $sp,$fp  #move: set register number 30 t0 contents of register number 29(according to the Mar.jar runtime
        lw      $31,36($sp)
        lw      $fp,32($sp)
        addiu   $sp,$sp,40
        jr      $31
        nop

isPrime:
        addiu   $sp,$sp,-24
        sw      $fp,20($sp)
        move    $fp,$sp
        sw      $4,24($fp)
        li      $2,1          #load immediate: set $2 to 16-bit immediate                # 0x1
        sw      $2,12($fp)
        li      $2,2                        # 0x2
        sw      $2,8($fp)
        b       $L9
        nop

$L12:
        lw      $3,24($fp)
        lw      $2,8($fp)
        nop
        div     $0,$3,$2
        bne     $2,$0,1f
        nop
        break   7
        mfhi    $2             # move from hi register: set $2 to contents of hi
        bne     $2,$0,$L10
        nop

        sw      $0,12($fp)
        b       $L11
        nop

$L10:
        lw      $2,8($fp)
        nop
        addiu   $2,$2,1
        sw      $2,8($fp)
$L9:
        lw      $2,24($fp)
        nop
        srl     $3,$2,31
        addu    $2,$3,$2
        sra     $2,$2,1
        move    $3,$2
        lw      $2,8($fp)
        nop
        slt     $2,$3,$2
        beq     $2,$0,$L12
        nop

$L11:
        lw      $2,12($fp)
        move    $sp,$fp
        lw      $fp,20($sp)
        addiu   $sp,$sp,24
        jr      $31
        nop

findSqrt:
        addiu   $sp,$sp,-48
        sw      $31,44($sp)
        sw      $fp,40($sp)
        move    $fp,$sp
        sw      $4,48($fp)
        sw      $0,24($fp)
        lui     $2,%hi($LC0)
        lw      $2,%lo($LC0)($2)           #load word: set $2 to contents of effective memory address
        nop
        sw      $2,28($fp)
$L17:
        lw      $2,24($fp)
        nop
        addiu   $2,$2,1
        sw      $2,24($fp)
        lw      $4,48($fp)
        jal     __floatsisf
        nop

        lw      $5,28($fp)
        move    $4,$2
        jal     __divsf3
        nop

        lw      $5,28($fp)
        move    $4,$2
        jal     __addsf3
        nop

        move    $3,$2
        lui     $2,%hi($LC1)
        lw      $5,%lo($LC1)($2)
        move    $4,$3
        jal     __divsf3
        nop

        sw      $2,28($fp)
        lw      $2,48($fp)
        nop
        addiu   $2,$2,1
        lw      $3,24($fp)
        nop
        beq     $3,$2,$L20        #branch if equal: branch to statement at address if $3 and $2 are equal
        nop

        b       $L17
        nop

$L20:
        nop
        lw      $4,28($fp)
        jal     __extendsfdf2
        nop

        move    $5,$3
        move    $4,$2
        jal     floor
        nop

        move    $5,$3
        move    $4,$2
        jal     __fixdfsi
        nop

        sw      $2,32($fp)
        lw      $2,32($fp)
        move    $sp,$fp
        lw      $31,44($sp)
        lw      $fp,40($sp)
        addiu   $sp,$sp,48
        jr      $31
        nop

IsSquare_of_prime:
        addiu   $sp,$sp,-40
        sw      $31,36($sp)
        sw      $fp,32($sp)
        move    $fp,$sp
        sw      $4,40($fp)
        sw      $0,24($fp)
        lw      $4,40($fp)
        jal     findSqrt
        nop

        sw      $2,28($fp)
        lw      $4,28($fp)
        jal     isPrime
        nop

        move    $3,$2
        li      $2,1                        # 0x1
        bne     $3,$2,$L22
        nop

        li      $2,1                        # 0x1
        sw      $2,24($fp)
$L22:
        lw      $2,24($fp)
        move    $sp,$fp
        lw      $31,36($sp)
        lw      $fp,32($sp)
        addiu   $sp,$sp,40
        jr      $31
        nop

$LC2:
        .ascii  "%d \012  \000"
$LC3:
        .ascii  "%d \000"
$LC4:
        .ascii  "%d \012\000"
main:
        addiu   $sp,$sp,-64
        sw      $31,60($sp)
        sw      $fp,56($sp)
        sw      $16,52($sp)
        move    $fp,$sp
        sw      $4,64($fp)
        sw      $5,68($fp)
        li      $2,1                        # 0x1
        sw      $2,28($fp)
        li      $2,168                  # 0xa8
        sw      $2,24($fp)
        b       $L25
        nop

$L29:
        lw      $4,24($fp)
        jal     isPalindrome
        nop

        sw      $2,32($fp)
        lw      $2,32($fp)
        nop
        bne     $2,$0,$L26
        nop

        lw      $4,24($fp)
        jal     IsSquare_of_prime
        nop

        sw      $2,36($fp)
        lw      $3,36($fp)
        li      $2,1                        # 0x1
        bne     $3,$2,$L26
        nop

        lw      $4,24($fp)
        jal     findSqrt
        nop

        move    $16,$2
        lw      $4,24($fp)
        jal     findSqrt
        nop

        mult    $16,$2
        lw      $2,24($fp)
        mflo    $3
        bne     $2,$3,$L26
        nop

        lw      $4,24($fp)
        jal     reverse
        nop

        sw      $2,40($fp)
        lw      $4,40($fp)
        jal     IsSquare_of_prime
        nop

        move    $3,$2
        li      $2,1                        # 0x1
        bne     $3,$2,$L26
        nop

        lw      $5,28($fp)
        lui     $2,%hi($LC2)
        addiu   $4,$2,%lo($LC2)
        jal     printf
        nop

        lw      $5,24($fp)
        lui     $2,%hi($LC3)
        addiu   $4,$2,%lo($LC3)
        jal     printf
        nop

        lw      $5,40($fp)
        lui     $2,%hi($LC4)
        addiu   $4,$2,%lo($LC4)
        jal     printf
        nop

        lw      $2,28($fp)
        nop
        addiu   $2,$2,1
        sw      $2,28($fp)
$L26:
        lw      $3,28($fp)
        li      $2,11                 # 0xb
        beq     $3,$2,$L31
        nop

        lw      $2,24($fp)
        nop
        addiu   $2,$2,1
        sw      $2,24($fp)
$L25:
        lw      $3,24($fp)
        li      $2,65536                    # 0x10000
        ori     $2,$2,0x86a0
        slt     $2,$3,$2
        bne     $2,$0,$L29
        nop

        b       $L28
        nop

$L31:
        nop
$L28:
        move    $2,$0
        move    $sp,$fp
        lw      $31,60($sp)
        lw      $fp,56($sp)
        lw      $16,52($sp)
        addiu   $sp,$sp,64
        jr      $31
        nop

$LC0:
        .word   1065353216
$LC1:
        .word   1073741824


#Sir I tried myself with this approach with taking tips from the recommended book and from the help command in MARS.jar( the compiler I was using, because QTSPIM could'nt run on my PC)